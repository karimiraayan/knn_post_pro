
#######################################
### include VPRO CNN LIB            ###
#######################################
# includes VPRO_CNN_LIB Library
#set(VPRO_CNN_LIB_dir "${CMAKE_CURRENT_SOURCE_DIR}/../cnn_converter/vpro_lib")
#add_subdirectory(${VPRO_CNN_LIB_dir} ${CMAKE_CURRENT_BINARY_DIR}/VPRO_CNN_LIB)
#target_include_directories(${module} PUBLIC ../cnn_converter/vpro_lib/includes/)
## Depends on Simulator
#target_include_directories(VPRO_CNN_LIB PUBLIC ../../../isa_intrinsic_lib/)
#target_link_libraries(VPRO_CNN_LIB VPRO_SIMULTOR_LIB)
#target_compile_definitions(VPRO_SIMULTOR_LIB PUBLIC NUM_VU_PER_CLUSTER=${UNITS} NUM_CLUSTERS=${CLUSTERS} STAT_COMMENT=\"${PROJECT}\")
#target_link_libraries(${module} VPRO_CNN_LIB)


#######################################
### include OpenCV                  ###
#######################################
#find_package(OpenCV REQUIRED)
#include_directories(${OpenCV_INCLUDE_DIRS})
#target_link_libraries(${module} ${OpenCV_LIBS})


#######################################
### Link agains PNGLIB              ###
#######################################
#target_link_libraries(${module} ${PNG_LIBRARY})


#######################################
### Link agains Darknet             ###
#######################################
#find_library(DARKNET_LIBRARY NAMES darknet
#             HINTS ${CMAKE_SOURCE_DIR}/lib ${CMAKE_SOURCE_DIR})
#
#target_link_libraries(${module} ${DARKNET_LIBRARY})


#######################################
### Link agains XTensor             ###
#######################################
#find_package(xtl REQUIRED PATHS ${CMAKE_SOURCE_DIR}/lib/xtl/install/)
#find_package(xtensor REQUIRED PATHS ${CMAKE_SOURCE_DIR}/lib/xtensor/install/)
#target_include_directories(${module} PUBLIC ${xtensor_INCLUDE_DIRS})
#target_link_libraries(${module}  xtensor)


#####################################
### Link agains BOOST             ###
#####################################
#set(Boost_USE_DEBUG_LIBS         OFF) # ignore debug libs and
#set(Boost_USE_RELEASE_LIBS       ON)  # only find release libs
#set(Boost_USE_MULTITHREADED      ON)
#find_package( Boost 1.65.1 COMPONENTS thread REQUIRED )
#message(STATUS "Boost version: ${Boost_VERSION}")
#include_directories(${Boost_INCLUDE_DIR})
#include_directories(${Boost_INCLUDE_DIRS})
#target_link_libraries(${module} ${Boost_LIBRARIES})
